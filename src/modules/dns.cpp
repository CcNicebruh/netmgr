#include "dns.hpp"
#include "../common/common.hpp"
#include <iostream>
#include <fstream>

int DNS::handle_command(const GlobalOptions& options) {
    switch (options.subcommand) {
        case SubCommandType::SHOW:
            return show_dns(options);
        case SubCommandType::SET:
            return set_dns(options);
        default:
            std::cerr << "Unknown DNS subcommand" << std::endl;
            return 1;
    }
}

int DNS::show_dns(const GlobalOptions& options) {
    Common::log_info("DNS configuration:");
    std::cout << std::endl;
    
    #ifdef __linux__
    (void)options; // Suppress unused parameter warning
    std::ifstream resolv_conf("/etc/resolv.conf");
    if (resolv_conf.is_open()) {
        std::string line;
        while (std::getline(resolv_conf, line)) {
            std::cout << line << std::endl;
        }
        resolv_conf.close();
    }
    return 0;
    #elif defined(__APPLE__)
    return Common::execute_command("scutil", {"--dns"}, options.dry_run);
    #elif defined(_WIN32)
    return Common::execute_command("nslookup", {}, options.dry_run);
    #endif
    
    return 0;
}

int DNS::set_dns(const GlobalOptions& options) {
    if (options.args.empty()) {
        std::cerr << "Usage: netmgr dns set <primary_dns> [secondary_dns]" << std::endl;
        return 1;
    }
    
    std::string primary = options.args[0];
    std::string secondary = options.args.size() > 1 ? options.args[1] : "";
    
    Common::log_info("Setting DNS servers: " + primary + (secondary.empty() ? "" : " " + secondary));
    
    #ifdef __linux__
    if (options.dry_run) {
        Common::log_info("Would write to /etc/resolv.conf");
        return 0;
    }
    
    std::ofstream resolv_conf("/etc/resolv.conf");
    if (resolv_conf.is_open()) {
        resolv_conf << "# Generated by netmgr" << std::endl;
        resolv_conf << "nameserver " << primary << std::endl;
        if (!secondary.empty()) {
            resolv_conf << "nameserver " << secondary << std::endl;
        }
        resolv_conf.close();
        return 0;
    }
    return 1;
    #elif defined(__APPLE__)
    // Get active network service
    std::string services = Common::execute_command_output("networksetup", {"-listallnetworkservices"});
    // This is simplified - would need proper service detection
    return Common::execute_command("networksetup", {"-setdnsservers", "Wi-Fi", primary, secondary}, options.dry_run);
    #elif defined(_WIN32)
    // Set DNS for all active interfaces - simplified
    return Common::execute_command("netsh", {"interface", "ip", "set", "dns", "name=\"Local Area Connection\"", 
                                           "static", primary}, options.dry_run);
    #endif
    
    return 0;
}
