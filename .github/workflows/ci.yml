name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-latest, macos-latest, windows-latest]
        build_type: [Debug, Release]
        include:
          - os: ubuntu-22.04
            compiler: gcc
          - os: ubuntu-latest
            compiler: gcc
          - os: macos-latest
            compiler: clang
          - os: windows-latest
            compiler: msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        sudo apt-get install -y iproute2 iptables net-tools dnsutils
        sudo apt-get install -y libjsoncpp-dev libgtest-dev

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
       brew install cmake ninja jsoncpp googletest pkg-config
       # Ensure pkg-config can find jsoncpp
       export PKG_CONFIG_PATH="/opt/homebrew/lib/pkgconfig:$PKG_CONFIG_PATH"
       pkg-config --exists jsoncpp && echo "jsoncpp found via pkg-config"
    
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake ninja
        vcpkg install jsoncpp gtest

    - name: Configure CMake
      run: |
        cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: netmgr-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/netmgr*
          !build/**/*.o
          !build/**/*.obj
